#shipping/models

from django.db import models

class Shipment(models.Model):
    order = models.OneToOneField('orders.Order', on_delete=models.CASCADE, related_name='shipment')
    tracking_number = models.CharField(max_length=100)
    carrier = models.CharField(max_length=100)
    estimated_delivery = models.DateField()
    shipped_date = models.DateField(null=True, blank=True)
    status = models.CharField(
        max_length=50,
        choices=[
            ('pending', 'Pending'),
            ('shipped', 'Shipped'),
            ('in_transit', 'In Transit'),
            ('delivered', 'Delivered'),
        ],
        default='pending'
    )

    def __str__(self):
        return f"Shipment for Order #{self.order.id} - {self.status}"


#shipping/views
"""
shipping/views.py
Handles shipment tracking and shipping details.
"""

from django.shortcuts import render, get_object_or_404
from shipping.models import Shipment


# ============================================================
# ðŸ”¹ SHIPPING DETAILS VIEW
# ============================================================
def shipping_details(request, order_id):
    """
    Display shipping details for a given order.
    
    Args:
        request: HTTP request object
        order_id (int): ID of the order whose shipment details are needed
    
    Returns:
        Renders `shipping/shipment_detail.html` with shipment information.
    
    Raises:
        404: If no shipment exists for the given order_id
    """
    # âœ… Secure: uses Django ORM `get_object_or_404` to safely fetch shipment
    shipment = get_object_or_404(Shipment, order_id=order_id)

    return render(request, 'shipping/shipment_detail.html', {
        'shipment': shipment
    })


#shipping/urls

from django.urls import path
from . import views

app_name = 'shipping'

urlpatterns = [
    path('details/<int:order_id>/', views.shipping_details, name='shipping_details'),
]
